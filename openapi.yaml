openapi: 3.0.1
info:
  title: API-DOCS
  version: 1.0.0
servers:
  - url: /
paths:
  /nodes:
    get:
      tags:
        - node
      description: List all AMOC nodes in a cluster.
      responses:
        '200':
          description: response object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesKV'
  /scenarios:
    get:
      tags:
        - scenarios
      description: List all available scenarios
      responses:
        '200':
          description: response object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioList'
  '/scenarios/{id}':
    get:
      tags:
        - scenario
      description: Get scenario status
      parameters:
        - name: id
          in: path
          description: Scenario name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: response object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioStatus'
        '404':
          description: no scenarion with such name
    patch:
      tags:
        - scenario
      description: Start scenario
      parameters:
        - name: id
          in: path
          description: Scenario name
          required: true
          schema:
            type: string
      requestBody:
        description: request body (as json)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioExecution'
        required: true
      responses:
        '200':
          description: response object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioExecutionResp'
        '404':
          description: no scenarion with such name
  /status:
    get:
      tags:
        - status
      description: 'Get AMOC app status, whether it is running or not.'
      responses:
        '200':
          description: response object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AmocStatus'
  /scenarios/upload:
    put:
      tags:
        - upload
      description: >-
        Uploads new scenario, you can run the next command to upload a file
        using curl utility


        `curl -s -H "Content-Type: text/plain" -T <filename>
        http://<amoc_host>/upload`
      requestBody:
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/UploadBody'
          text/plain:
            schema:
              $ref: '#/components/schemas/UploadBody'
            example: Past module source code here!!!
      responses:
        '200':
          description: response object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResp'
        '400':
          description: response object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    NodesKV:
      required:
        - nodes
      type: object
      properties:
        nodes:
          type: object
          additionalProperties:
            type: string
            enum:
              - up
              - down
          example:
            amoc@host1: up
            amoc@host2: up
    ScenarioList:
      required:
        - scenarios
      type: object
      properties:
        scenarios:
          type: array
          items:
            type: string
          example:
            - some_scenario
            - another_scenario
    ScenarioStatus:
      required:
        - scenario_status
      type: object
      properties:
        scenario_status:
          type: string
          enum:
            - loaded
            - running
            - finished
            - error
    ScenarioExecution:
      required:
        - users
      type: object
      properties:
        users:
          type: integer
          description: Number of users to start
          example: 1000
        settings:
          type: object
          description: Scenario parameters
          additionalProperties:
            type: string
          example:
            atom_parameter: atom1
            list_parameter: '[atom1, atom2]'
            tuple_parameter: '{atom1, atom2}'
            string_parameter: '"some_string"'
            binary_parameter: <<"some_binary">>
    ScenarioExecutionResp:
      required:
        - scenario
      type: object
      properties:
        scenario:
          type: string
          enum:
            - started
            - error
    AmocStatus:
      required:
        - node_status
      type: object
      properties:
        node_status:
          type: string
          enum:
            - up
            - down
    UploadBody:
      type: string
      format: binary
    UploadResp:
      required:
        - compile
      type: object
      properties:
        compile:
          type: string
          description: ok | CompilationError
          example: ok
    Error:
      required:
        - error
      type: object
      properties:
        error:
          type: string
          example: error description
